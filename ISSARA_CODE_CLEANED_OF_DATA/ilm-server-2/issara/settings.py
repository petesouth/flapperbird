"""
Django settings for issara project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
from datetime import timedelta
import environ

NOSE_ARGS = ['--nocapture',
             '--nologcapture',]

env = environ.Env(
    ALLOWED_HOSTS=(list, [])
)

# reading .env file
environ.Env.read_env()

# False if not in os.environ
DEBUG = env('DEBUG')

TESTING = 'test' in sys.argv


LOGIN_URL = 'two_factor:login'

# this one is optional
LOGIN_REDIRECT_URL = 'two_factor:profile'

FRONTEND_URL = env('FRONTEND_URL')


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('secrete_key')



CORS_ORIGIN_ALLOW_ALL = True
X_FRAME_OPTIONS = 'ALLOW'

ALLOWED_HOSTS = env('ALLOWED_HOSTS')

# Application definition

INSTALLED_APPS = [
    'issara.ilm_server_2',
    'storages',
    'debug_toolbar',
    'corsheaders',
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django_rest_passwordreset',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'issara.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'issara', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'issara.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#    }
#}

DATABASES = {
     'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': env('db_name'),
        'USER': env('db_user'),
        'PASSWORD': env('db_password'),
        'HOST':  env('db_server'),
        'PORT': env('db_port'),
        'DATABASE': env('db_name')
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

DJANGO_REST_MULTITOKENAUTH_REQUIRE_USABLE_PASSWORD = False
DJANGO_REST_LOOKUP_FIELD = "username"

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


DATE_INPUT_FORMATS = [
    '%Y-%m-%d',              # '2006-10-25'
    '%m/%d/%Y',              # '10/25/2006'
]


#This is the Email address account I setup for sending.
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'issaranotify@issarainstitute.org'
EMAIL_USER = 'issaranotify@issarainstitute.org'
EMAIL_HOST_PASSWORD = 'jlkadjfklajdlf83423'
#EMAIL_HOST_PASSWORD = 'kl;ajsdfa09df8088980pjmv8&*!'

DEFAULT_FROM_EMAIL = 'issaranotify@issarainstitute.org'
EMAIL_SENDER_FROM_ADDRESS = 'issaranotify@issarainstitute.org'




JWT2FA_AUTH = {

    # Throttle limit for code token requests from same IP
    'CODE_TOKEN_THROTTLE_RATE': '10/1m',



}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10000,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'drf_jwt_2fa.authentication.Jwt2faAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'issara.ilm_server_2.renderers.OnlyRawBrowsableAPIRenderer',
        'drf_renderer_xlsx.renderers.XLSXRenderer',
    ],
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
}


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': 'django_cache_dir',
    }
}


# SLACK LOGGER
ENABLE_SLACK = env('ENABLE_SLACK')

if ENABLE_SLACK == 'True':
    SLACK_API_KEY = env('SLACK_API_KEY')
    SLACK_CHANNEL = env('SLACK_CHANNEL')

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'filters': {
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse'
            }
        },
        'handlers': {
            'mail_admins': {
                'level': 'ERROR',
                'filters': ['require_debug_false'],
                'class': 'django.utils.log.AdminEmailHandler'
            },
            'slack-error': {
                'level': 'ERROR',
                'api_key': SLACK_API_KEY,
                'class': 'slacker_log_handler.SlackerLogHandler',
                'channel': SLACK_CHANNEL
            },
            'slack-info': {
                'level': 'INFO',
                'api_key': SLACK_API_KEY,
                'class': 'slacker_log_handler.SlackerLogHandler',
                'channel': SLACK_CHANNEL
            }
        },
        'loggers': {
            'django.request': {
                'handlers': ['slack-error'],
                'level': 'ERROR',
                'propagate': True,
            },
        }
    }

# SECURITY SETTINGS
SECURE_SSL_REDIRECT = env('SECURE_SSL_REDIRECT') == 'True'
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
CSRF_COOKIE_SECURE = env('CSRF_COOKIE_SECURE') == 'True'
SESSION_COOKIE_SECURE = env('SESSION_COOKIE_SECURE') == 'True'
SECURE_REDIRECT_EXEMPT = [
    r'^api/v2/app-engine/cron/*',
]


TWO_FACTOR_PATCH_ADMIN = True


###################################################################
###                    GCLOUD BUCKET SETTINGS                   ###
###################################################################
from google.oauth2 import service_account

GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
    os.path.join(BASE_DIR, 'ilm-prod-5fb5bd914a82.json')
)

GS_BUCKET_NAME = 'ilm-private'
GS_PROJECT_ID = 'ilm-prod'
DEFAULT_FILE_STORAGE = 'issara.ilm_server_2.storages.PrivateGcloudStorage'
# GS_FILE_OVERWRITE = False


# STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
STATICFILES_STORAGE = 'issara.ilm_server_2.storages.StaticGcloudStorage'
STATIC_URL = 'https://storage.cloud.google.com/ilm-public/static/'


# Workaround to enable django-debug-toolbar from Docker
# https://stackoverflow.com/questions/26898597/django-debug-toolbar-and-docker
DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG
}
